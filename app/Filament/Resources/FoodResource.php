<?php

namespace App\Filament\Resources;

use App\Filament\Resources\FoodResource\Pages;
use App\Filament\Resources\FoodResource\RelationManagers;
use App\Models\Food;
use App\Models\Item;
use App\Models\Location;
use App\Models\SubItem;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Infolists\Components\Grid;
use Filament\Infolists\Components\ImageEntry;
use Filament\Infolists\Components\Section;
use Filament\Infolists\Components\TextEntry;
use Filament\Infolists\Infolist;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use Illuminate\Support\Str;

class FoodResource extends Resource
{
    protected static ?string $model = Item::class;
    protected static ?string $breadcrumb = 'tutu';
    protected static ?string $navigationLabel = 'label ne';
    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\TextInput::make('name')->disabled(),
                Forms\Components\TextInput::make('eng_name')->rules([
                    'required'
                ])->validationMessages([
                    'required' => 'nhap de'
                ])
            ]);
    }

    public static function getEloquentQuery(): Builder
    {
        return Item::query()
            ->with(['locations', 'subItems', 'subItems.locations'])
            ->where(['is_deleted' => false]); // TODO: Change the autogenerated stub
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('name')
                ->description(function ($record) {
                })
                ->searchable(),
                Tables\Columns\TextColumn::make('price')
                ->state(function ($record) {
                    $min = $record->subItems->flatMap(function ($subItem) {
                        return $subItem->locations->pluck('pivot.price');
                    })->min();

                    $max = $record->subItems->flatMap(function ($subItem) {
                        return $subItem->locations->pluck('pivot.price');
                    })->max();

                    return Str::limit($min . '-' . $max, 2, '...');

                }),
                Tables\Columns\TextColumn::make('location')
                    ->state(function ($record) {
                        return $record->locations->pluck('name')->implode(', ');
                    }),
                Tables\Columns\TextColumn::make('is_deleted')
                ->toggleable(isToggledHiddenByDefault: true)
                ->label('delted')
            ])
            ->filters([
                Tables\Filters\SelectFilter::make('location')
                ->options(Location::query()->where('is_deleted', '=', false)
                ->pluck('name', 'location_id'))
                    ->placeholder('chon de')
                ->query(function (Builder $query, array $data) {
                    $value = $data["value"];
                    if ($value) {
                        return $query->whereHas('locations', function ($query) use ($value) {
                            $query->where('locations.location_id', $value);
                        });
                    }
                    return $query;
                })
            ], layout: Tables\Enums\FiltersLayout::AboveContent)
            ->actions([
                Tables\Actions\EditAction::make()
                    ->successRedirectUrl(route('filament.admin.resources.food.index'))
                    ->slideOver()
                ->modalHeading('1233'),
                Tables\Actions\ViewAction::make()->modalHeading('333')
            ])
            ->bulkActions([
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function canCreate(): bool
    {
        return false; // TODO: Change the autogenerated stub
    }

    public static function infolist(Infolist $infolist): Infolist
    {
        return $infolist->schema([
            Section::make('')
            ->schema([
                ImageEntry::make('image')
                    ->width('500px')
                    ->height('500px')
                    ->label('')
                    ->extraAttributes([
                        'loading' => 'lazy',
                        'class' => 'justify-center'
                    ])
            ]),
            Section::make('body')
            ->schema([
                TextEntry::make('name')->alignCenter(),
                TextEntry::make('price'),
            ])
        ]);
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListFood::route('/'),
//            'create' => Pages\CreateFood::route('/create'),
//            'edit' => Pages\EditFood::route('/{record}/edit'),
        ];
    }
}
